{"ast":null,"code":"var _jsxFileName = \"/Users/damonvecci/Backtrace/my-test/src/ViewObject.js\";\nimport React, { useState } from 'react';\nimport ExpandableKeyValue from './ExpandableKeyValue';\n\nconst ViewObject = ({\n  valObject\n}) => {\n  const keys = Object.keys(valObject);\n\n  const parseObject = ({\n    key,\n    value,\n    expanded,\n    setExpanded\n  }) => {\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }\n      }, key, \": \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }\n      }, value));\n    } else if (typeof value === 'object') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginLeft: '5px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ExpandableKeyValue, {\n        key: key,\n        value: value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, keys.map(key => {\n    return parseObject({\n      key,\n      value: valObject[key]\n    });\n  }));\n};\n\nexport default ViewObject;","map":{"version":3,"sources":["/Users/damonvecci/Backtrace/my-test/src/ViewObject.js"],"names":["React","useState","ExpandableKeyValue","ViewObject","valObject","keys","Object","parseObject","key","value","expanded","setExpanded","marginLeft","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAClC,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,SAAZ,CAAb;;AAEA,QAAMG,WAAW,GAAG,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,QAAb;AAAuBC,IAAAA;AAAvB,GAAD,KAAyC;AACzD,QAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,IAA0D,OAAOA,KAAP,KAAiB,SAA/E,EAA0F;AACtF,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOD,GAAP,OADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,KAAP,CAFJ,CADJ;AAMH,KAPD,MAOO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,0BACI;AAAK,QAAA,KAAK,EAAE;AAACG,UAAAA,UAAU,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,kBAAD;AAAoB,QAAA,GAAG,EAAEJ,GAAzB;AAA8B,QAAA,KAAK,EAAEC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH,KANM,MAMA;AACH,aAAO,IAAP;AACH;AACJ,GAjBD;;AAkBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMJ,IAAI,CAACQ,GAAL,CAASL,GAAG,IAAI;AAChB,WAAOD,WAAW,CAAC;AAACC,MAAAA,GAAD;AAAMC,MAAAA,KAAK,EAAEL,SAAS,CAACI,GAAD;AAAtB,KAAD,CAAlB;AACD,GAFC,CADN,CADJ;AAOH,CA5BD;;AA8BA,eAAeL,UAAf","sourcesContent":["import React, {useState} from 'react';\nimport ExpandableKeyValue from './ExpandableKeyValue';\n\nconst ViewObject = ({ valObject }) => {\n    const keys = Object.keys(valObject);\n\n    const parseObject = ({key, value, expanded, setExpanded}) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n            return (\n                <div>\n                    <span>{key}: </span>\n                    <span>{value}</span>\n                </div>\n              )\n        } else if (typeof value === 'object') {\n            return (\n                <div style={{marginLeft: '5px'}}>\n                    <ExpandableKeyValue key={key} value={value} />\n                </div>\n            )\n        } else {\n            return null;\n        }\n    };\n    return (\n        <div>\n            { keys.map(key => {\n              return parseObject({key, value: valObject[key]});\n            })}\n        </div>\n    );\n}\n\nexport default ViewObject;"]},"metadata":{},"sourceType":"module"}